{"version":3,"sources":["store/home/reducer.js","store/home/actionType.js","store/index.js","router/router.js","Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["reducer","combineReducers","list","state","action","type","payload","data","store","createStore","reducers","applyMiddleware","thunk","promise","Loading","Index","Loadable","loading","loader","path","component","exact","Layout","routers","map","route","index","key","React","PureComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0yBAGO,IAeQA,EAXCC,YAAgB,CAC5BC,KAAM,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC1B,OAAQA,EAAOC,MACX,ICRgB,eDShB,OAAO,EAAP,GAAWF,EAAX,CAAkBD,KAAME,EAAOE,QAAQC,OACvC,QACI,OAAOJ,M,yBEFRK,EANDC,YACVC,EFHwB,CACxBR,KAAM,IEINS,YAAgBC,IAAOC,M,wECN3B,SAASC,IACL,OAAO,2CAEX,IAAMC,EAAQC,IAAS,CACnBC,QAASH,EACTI,OAAQ,kBAAM,iCAWH,GAeX,CACIC,KAAK,IACLC,UA1BKJ,IAAS,CAClBC,QAASH,EACTI,OAAQ,kBAAM,uDAyBVG,OAAO,GAEX,CACIF,KAAK,QACLC,UAAWL,ICTJO,E,iLArBP,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KAEQC,EAAQC,KAAI,SAACC,EAAMC,GACf,OACI,kBAAC,IAAD,CACIC,IAAKD,EACLP,KAAMM,EAAMN,KACZE,MAAOI,EAAMJ,MACbD,UAAWK,EAAML,qB,GAZhCQ,IAAMC,eCKZC,MARf,WACE,OACE,kBAAC,IAAD,CAAUtB,MAAOA,GACf,kBAAC,EAAD,QCIcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ecd67dd2.chunk.js","sourcesContent":["import { LIST_SUCCESS } from './actionType';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport const initialState = {\r\n    list: []\r\n}\r\n\r\nconst reducer = combineReducers({\r\n    list: (state = {}, action) => {\r\n        switch (action.type) {\r\n            case LIST_SUCCESS:\r\n            return {...state, list: action.payload.data}\r\n            default:\r\n                return state;\r\n        }\r\n    }\r\n});\r\n\r\nexport default reducer","export const LIST_LOADING = 'LIST_LOADING';\r\n\r\nexport const LIST_SUCCESS = 'LIST_SUCCESS';\r\n\r\nexport const LIST_FAILURE = 'LIST_FAILURE';\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport reducers, { initialState } from './home/reducer';\r\nimport thunk from 'redux-thunk';\r\nimport promise from 'redux-promise'\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    initialState,\r\n    applyMiddleware(thunk, promise)\r\n);\r\n\r\nexport default store;","import Loadable from 'react-loadable'\r\nimport React from 'react'\r\nfunction Loading(){\r\n    return <div>loading...</div>\r\n}\r\nconst Index = Loadable({\r\n    loading: Loading,\r\n    loader: () => import('../page/Hook/Page/index')\r\n})\r\nconst Home = Loadable({\r\n    loading: Loading,\r\n    loader: () => import('../page/Home/index')\r\n})\r\n// const Page = Loadable({\r\n//     loading: Loading,\r\n//     loader: () => import('../page/Hook/Page')\r\n// })\r\n\r\nexport default [\r\n    // {\r\n    //     path:'/',\r\n    //     component: Indexs,\r\n    //     exact: true\r\n    // },\r\n    // {\r\n    //     path:'/hooks',\r\n    //     component: Index,\r\n    //     exact: true\r\n    // },\r\n    // {\r\n    //     path: '/hooks/page',\r\n    //     component: Page\r\n    // },\r\n    {\r\n        path:'/',\r\n        component: Home,\r\n        exact: true\r\n    },\r\n    {\r\n        path:'/list',\r\n        component: Index,\r\n    }\r\n]","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n} from 'react-router-dom';\r\nimport routers from '../router/router';\r\n\r\nclass Layout extends React.PureComponent {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    {\r\n                        routers.map((route,index) => {\r\n                            return(\r\n                                <Route \r\n                                    key={index}\r\n                                    path={route.path}\r\n                                    exact={route.exact}\r\n                                    component={route.component}\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Layout from './Layout'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Layout />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}